// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  username  String    @unique // Essential for inviting users
  password  String    // Will be a hashed password
  createdAt DateTime  @default(now())

  // Relations
  memberships      GroupMembership[]
  assignedProjects Project[]
  lastEditedProjects Project[] @relation("ProjectLastEditor")
  notifications    Notification[]
  taskHistory      TaskHistory[]
}

model LearningGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  inviteCode  String   @unique @default(cuid()) @map("invite_code") // Unique code for sharing/joining
  createdAt   DateTime @default(now())

  // Relations
  memberships GroupMembership[]
  projects    Project[]
}

// Join table for the many-to-many relationship between Users and LearningGroups
model GroupMembership {
  userId  String @map("user_id")
  groupId String @map("group_id")
  role    Role   @default(MEMBER)
  joinedAt DateTime @default(now())

  // Relations
  user  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  group LearningGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId]) // Composite primary key
}

// Represents a shared project or assignment within a group
model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime? @map("due_date")
  assignedTo  String?   @map("assigned_to") // User ID of the assigned member
  priority    Priority @default(MEDIUM)
  status      ProjectStatus @default(PLANNING)
  lastEditedBy String? @map("last_edited_by") // User ID of the last editor
  lastEditedAt DateTime? @map("last_edited_at") // Timestamp of last edit
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  groupId String        @map("group_id")
  group   LearningGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  assignedUser User?    @relation(fields: [assignedTo], references: [id], onDelete: SetNull)
  lastEditor  User?    @relation("ProjectLastEditor", fields: [lastEditedBy], references: [id], onDelete: SetNull)
}

// Notification model for tracking user notifications
model Notification {
  id        String   @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Smart notification type for tracking different alert types
  alertType String @default("standard") @map("alert_type") // 'standard', 'smart_start_reminder', 'deadline_critical'

  // Relations
  userId    String @map("user_id")
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Optional references to related entities
  projectId String? @map("project_id")
  groupId   String? @map("group_id")
  
  // Additional metadata as JSON
  metadata  Json?

  @@index([userId, createdAt])
  @@index([userId, isRead])
  @@index([projectId, alertType])
}

// Task history model for tracking project completion times and events
model TaskHistory {
  id        String   @id @default(cuid())
  projectId String   @map("project_id")
  eventType String   @map("event_type") // 'started', 'completed', 'status_changed'
  actualTimeMinutes Int? @map("actual_time_minutes") // Time taken to complete (only for 'completed' events)
  fromStatus String? @map("from_status") // Previous status for status change events
  toStatus   String? @map("to_status")   // New status for status change events
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  userId    String @map("user_id") // User who performed the action
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId, eventType])
  @@index([userId, createdAt])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  DONE
}

enum NotificationType {
  TASK_ASSIGNED
  DEADLINE_APPROACHING
  GROUP_INVITATION
  PROJECT_UPDATED
  STATUS_CHANGED
}
